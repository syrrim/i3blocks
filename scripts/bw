#!/bin/bash
# Copyright (C) 2012 Stefan Breunig <stefan+measure-net-speed@mathphys.fsk.uni-heidelberg.de>
# Copyright (C) 2014 kaueraal
# Copyright (C) 2015 Thiago Perrotta <perrotta dot thiago at poli dot ufrj dot br>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Use the provided interface, otherwise the device used for the default route.
INTERFACE=`echo $BLOCK_INSTANCE|cut -d',' -f1`
DIR=`echo $BLOCK_INSTANCE|cut -d',' -f2`

if [[ -z $INTERFACE ]]; then
  INTERFACE=$(ip route | awk '/^default/ { print $5 ; exit }')
fi
if [[ -z $DIR ]]; then
  DIR="in"
fi

# Issue #36 compliant.
if ! [ -e "/sys/class/net/${INTERFACE}/operstate" ] || ! [ "`cat /sys/class/net/${INTERFACE}/operstate`" = "up" ]
then
    echo ""
    echo ""
    echo "#DB4848"
    exit 0
fi

# path to store the old results in
path="/dev/shm/$(basename $0)-${BLOCK_INSTANCE}"

# grabbing data for each adapter.
if [[ $DIR == "in" ]]; then
  read bytes < "/sys/class/net/${INTERFACE}/statistics/rx_bytes"
else
  read bytes < "/sys/class/net/${INTERFACE}/statistics/tx_bytes"
fi

# get time
time=$(date +%s)

# write current data if file does not exist. Do not exit, this will cause
# problems if this file is sourced instead of executed as another process.
if ! [[ -f "${path}" ]]; then
  echo "${time} ${bytes}" > "${path}"
  chmod 0666 "${path}"
fi

# read previous state and update data storage
echo "${time} ${bytes}" >> "${path}"
byte_rate=`cat "${path}" |
    tail -n 10 | 
    awk ' 
    BEGIN{ 
        prev = 0
        max = 0
    }
    { 
        time = $1
        data = $2
        if(prev){
            difftime = time - prevtime #those crispy state properties
            diffdata = data - prevdata
            if(difftime){
                val = diffdata / difftime #rate of change hype
                if(val > max)max = val
            }
        }
        prevtime = $1
        prevdata = $2
        prev = 1
    }
    END{
        print max
    }'`


# shift by 10 bits to get KiB/s. If the value is larger than
# 1024^2 = 1048576, then display MiB/s instead
kib=$(( $byte_rate >> 10 ))
if hash bc 2>/dev/null && [[ "$kib" -gt 1024 ]]; then
printf '%sM\n' "`echo "scale=1; $kib / 1024" | bc`"
else if [[ "$kib" -gt 0 ]]; then
echo "${kib}K"
fi
fi
